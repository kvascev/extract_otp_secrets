name: release

# https://data-dive.com/multi-os-deployment-in-cloud-using-pyinstaller-and-github-actions
# https://github.com/actions/create-release
# https://github.com/actions/upload-artifact
# https://github.com/actions/download-artifact
# https://github.com/actions/upload-release-asset

# https://docs.github.com/de/actions/using-workflows/workflow-syntax-for-github-actions
# https://docs.github.com/en/actions/using-workflows
# https://docs.github.com/en/actions/learn-github-actions/contexts
# https://docs.github.com/en/actions/learn-github-actions/expressions

# https://peps.python.org/pep-0440/
# https://semver.org/

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        # Writing to env with >> $GITHUB_ENV is an alternative
        # TODO deprecated set-output: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
        run: echo "::set-output name=date::$(date +'%d.%m.%Y')"
      - name: Get version number
        id: version
        # TODO deprecated set-output: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
        run: echo "::set-output name=version::${TAG_NAME/v/}"
        env:
          TAG_NAME: ${{ github.ref }}
      - name: Create Release
        id: create_release
        # TODO replace deprecated actions/create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DATE: ${{ steps.date.outputs.date }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.version.outputs.version }} - ${{ steps.date.outputs.date }}
          draft: true
          prerelease: false
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v3
        with:
          name: release_url
          path: release_url.txt

  build:
    name: Build packages
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # - os: ubuntu-latest
          #   TARGET: linux
          #   CMD_BUILD: >
          #       pyinstaller -y --add-data $pythonLocation/__yolo_v3_qr_detector/:__yolo_v3_qr_detector/ --onefile src/extract_otp_secrets.py
          #   OUT_FILE_NAME: extract_otp_secrets
          #   ASSET_NAME: extract_otp_secrets_linux_x86_64
          #   ASSET_MIME: application/x-executable
          # - os: macos-latest
          #   TARGET: macos
          #   # TODO add --icon
          #   # TODO add --osx-bundle-identifier
          #   # TODO add --codesign-identity
          #   # TODO add --osx-entitlements-file
          #   # TODO https://pyinstaller.org/en/stable/spec-files.html#spec-file-options-for-a-macos-bundle
          #   # TODO --target-arch universal2
          #   CMD_BUILD: >
          #     pyinstaller -y --add-data $macos_python_path/__yolo_v3_qr_detector/:__yolo_v3_qr_detector/ --onefile --argv-emulation src/extract_otp_secrets.py &&
          #     ls -R
          #     #  &&
          #     # cd dist/ &&
          #     # zip -r9 extract_otp_secrets extract_otp_secrets.app/
          #   OUT_FILE_NAME: extract_otp_secrets
          #   ASSET_NAME: extract_otp_secrets_macos_x86_64
          #   ASSET_MIME: application/x-newton-compatible-pkg
          - os: windows-latest
            TARGET: windows
            # TODO add --icon
            # TODO add --version-file
            # TODO add --manifest
            # TODO use UPX
            # TODO find more elegant solution for pyzbar\libiconv.dll and pyzbar\libzbar-64.dll
            CMD_BUILD: pyinstaller -y --add-data "$($Env:pythonLocation)\__yolo_v3_qr_detector;__yolo_v3_qr_detector" --add-binary "$($Env:pythonLocation)\Lib\site-packages\pyzbar\libiconv.dll;pyzbar" --add-binary "$($Env:pythonLocation)\Lib\site-packages\pyzbar\libzbar-64.dll;pyzbar" --onefile src/extract_otp_secrets.py
            # CMD_BUILD: pyinstaller -y --add-data "$($Env:pythonLocation)\__yolo_v3_qr_detector;__yolo_v3_qr_detector" --add-binary "%pythonLocation%\pyzbar\libiconv.dll;pyzbar" --add-binary "%pythonLocation%\pyzbar\libzbar-64.dll;pyzbar" --onefile src/extract_otp_secrets.py
            OUT_FILE_NAME: extract_otp_secrets.exe
            ASSET_NAME: extract_otp_secrets_win_x86_64.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
    steps:
      - uses: actions/checkout@v3
      - name: Set macos macos_python_path
        # TODO use variable for Python version
        run: echo "macos_python_path=/Library/Frameworks/Python.framework/Versions/3.11" >> $GITHUB_ENV
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          check-latest: true
      - name: Install zbar shared lib for QReader (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y libzbar0
      - name: Install zbar shared lib for QReader (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install zbar
      - name: Install dependencies
        # TODO fix --use-pep517
        run: |
          python -m pip install --upgrade pip
          pip install -U -r requirements-dev.txt
          pip install -U .
      - name: Display structure of installed files
        run: ls -R . $macos_python_path
        if: runner.os == 'macOS'
      - name: Display structure of installed files
        run: |
          dir
          dir %pythonLocation%
          dir %pythonLocation%\DLLs
          dir %pythonLocation%\Lib
          dir %pythonLocation%\Lib\site-packages
          dir %pythonLocation%\Lib\site-packages\pyzbar
          dir %pythonLocation%\libs
          dir %pythonLocation%\Scripts
          dir %pythonLocation%\share
          dir %pythonLocation%\tools
        shell: cmd
        if: runner.os == 'windows'
      - name: Build with pyinstaller for ${{ matrix.TARGET }}
        run: ${{matrix.CMD_BUILD}}
      - name: Display structure of generated files
        run: ls -R
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v3
        with:
          name: release_url
      - name: Display structure of downloaded files
        run: ls -R
      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        # TODO deprecated set-output: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
        run: |
          value=$(cat release_url.txt)
          echo ::set-output name=upload_url::$value
      # TODO create and upload hashes https://docs.github.com/en/actions/learn-github-actions/expressions#hashfiles
      - name: Upload Release Asset
        id: upload-release-asset
        # TODO replace deprecated actions/upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
          asset_name: ${{ matrix.ASSET_NAME}}
          asset_content_type: ${{ matrix.ASSET_MIME}}

  # test:
  #   name: Test executable in new instance
  #   needs: create-release
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       include:
  #         - os: ubuntu-latest
  #           TARGET: linux
  #           CMD_BUILD: >
  #               pyinstaller -y --add-data $pythonLocation/__yolo_v3_qr_detector/:__yolo_v3_qr_detector/ --onefile src/extract_otp_secrets.py
  #           OUT_FILE_NAME: extract_otp_secrets
  #           ASSET_NAME: extract_otp_secrets (Linux amd64)
  #           ASSET_MIME: application/x-executable
  #         # - os: macos-latest
  #         #   TARGET: macos
  #         #   CMD_BUILD: pyinstaller -y --add-data $pythonLocation/__yolo_v3_qr_detector/:__yolo_v3_qr_detector/ --onefile --argv-emulation --target-arch universal2 src/extract_otp_secrets.py
  #         #   OUT_FILE_NAME: clipster.zip
  #         #   ASSET_NAME: extract_otp_secrets (Universal2)
  #         #   ASSET_MIME: application/zip
  #         - os: windows-latest
  #           TARGET: windows
  #           CMD_BUILD: pyinstaller -y --add-data $pythonLocation/__yolo_v3_qr_detector/:__yolo_v3_qr_detector/ --onefile src/extract_otp_secrets.py
  #           OUT_FILE_NAME: extract_otp_secrets.exe
  #           ASSET_NAME: extract_otp_secrets.exe (x64)
  #           ASSET_MIME: application/vnd.microsoft.portable-executable
